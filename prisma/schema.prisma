// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Usuario {
    uuid_user            String          @id @default(uuid())
    nome                 String
    nome_cracha          String
    cpf                  String          @unique
    instituicao          String
    email                String          @unique
    senha                String?
    active               Boolean         @default(true)
    passwordResetToken   String?
    passwordResetExpires DateTime?
    created_at           DateTime        @default(now())
    updated_at           DateTime        @default(now()) @updatedAt
    evento               Evento[]
    userAtividade        UserAtividade[]
    userInscricao        UserInscricao[]
    Venda                Venda[]
    UserEvento           UserEvento[]
    UserInscricao        UserInscricao[] @relation(name: "UserInscricaoPayer")

    @@map("tb_usuario")
}

model Evento {
    uuid_evento        String       @id @default(uuid())
    uuid_user_owner    String
    nome               String       @unique
    banner_img_url     String?      @db.LongText
    date               DateTime?
    conteudo           String       @db.LongText
    active             Boolean      @default(true)
    isPrivate          Boolean      @default(false)
    password           String?
    colors             String?
    background_img_url String?
    access_token       String?
    public_key         String?
    refresh_token      String?
    expires_in         Int?
    created_at         DateTime     @default(now())
    updated_at         DateTime     @default(now()) @updatedAt
    usuario            Usuario      @relation(fields: [uuid_user_owner], references: [uuid_user])
    lote               Lote[]
    atividade          Atividade[]
    Produto            Produto[]
    UserEvento         UserEvento[]

    @@map("tb_evento")
}

model Lote {
    uuid_lote      String          @id @default(uuid())
    uuid_evento    String
    preco          Float
    nome           String
    descricao      String?
    max_inscricoes Int
    inscricoes     Int
    ativo          Boolean         @default(true)
    created_at     DateTime        @default(now())
    updated_at     DateTime        @default(now()) @updatedAt
    evento         Evento          @relation(fields: [uuid_evento], references: [uuid_evento])
    userInscricao  UserInscricao[]

    @@map("tb_lote")
}

model Atividade {
    uuid_atividade   String          @id @default(uuid())
    uuid_evento      String
    date             DateTime?
    nome             String
    descricao        String?         @db.Text
    max_participants Int?
    created_at       DateTime        @default(now())
    updated_at       DateTime        @default(now()) @updatedAt
    tipo_atividade   TipoAtividade   @default(MINICURSO)
    evento           Evento          @relation(fields: [uuid_evento], references: [uuid_evento])
    userAtividade    UserAtividade[]

    @@map("tb_atividade")
}

model UserEvento {
    uuid_user   String
    uuid_evento String
    create_at   DateTime @default(now())
    updated_at  DateTime @default(now()) @updatedAt
    perfil      Perfil   @default(PARTICIPANTE)
    usuario     Usuario  @relation(fields: [uuid_user], references: [uuid_user])
    evento      Evento   @relation(fields: [uuid_evento], references: [uuid_evento])

    @@id([uuid_user, uuid_evento])
    @@map("tb_user_evento")
}

model UserAtividade {
    uuid_user      String
    uuid_atividade String
    presenca       Boolean   @default(false)
    created_at     DateTime  @default(now())
    updated_at     DateTime  @default(now()) @updatedAt
    user           Usuario   @relation(fields: [uuid_user], references: [uuid_user])
    atividade      Atividade @relation(fields: [uuid_atividade], references: [uuid_atividade])

    @@id([uuid_user, uuid_atividade])
    @@map("tb_usuario_atividade")
}

model UserInscricao {
    uuid_userInscricao      String?         @default(uuid())
    uuid_user               String
    uuid_lote               String
    uuid_payer              String
    credenciamento          Boolean         @default(false)
    id_payment_mercado_pago String?
    expiration_datetime     DateTime?
    status_detail           String?
    payment_method          String?
    last_four_digits        String?
    created_at              DateTime        @default(now())
    updated_at              DateTime        @default(now()) @updatedAt
    status_pagamento        StatusPagamento @default(PENDENTE)
    usuario                 Usuario         @relation(fields: [uuid_user], references: [uuid_user])
    lote                    Lote            @relation(fields: [uuid_lote], references: [uuid_lote])
    payer                   Usuario         @relation(name: "UserInscricaoPayer", fields: [uuid_payer], references: [uuid_user])

    @@id([uuid_lote, uuid_user])
    @@map("tb_usuario_inscricao")
}

model Produto {
    uuid_produto String   @id @default(uuid())
    nome         String
    descricao    String?  @db.Text
    preco        Float
    estoque      Int      @default(0)
    imagem_url   String?
    uuid_evento  String
    created_at   DateTime @default(now())
    updated_at   DateTime @default(now()) @updatedAt
    evento       Evento   @relation(fields: [uuid_evento], references: [uuid_evento])
    Venda        Venda[]

    @@map("tb_produto")
}

model Venda {
    uuid_venda     String  @id @default(uuid())
    uuid_user      String
    uuid_produto   String
    quantidade     Int     @default(1)
    uuid_pagamento String
    produto        Produto @relation(fields: [uuid_produto], references: [uuid_produto])
    user           Usuario @relation(fields: [uuid_user], references: [uuid_user])

    @@map("tb_venda")
}

enum Perfil {
    ADMINISTRADOR
    PARTICIPANTE
    ORGANIZADOR
}

enum TipoAtividade {
    MINICURSO
    WORKSHOP
    OFICINA
    PALESTRA
}

enum StatusPagamento {
    PENDENTE
    PROCESSANDO
    REALIZADO
    CANCELADO
    REJEITADO
    GRATUITO
}
